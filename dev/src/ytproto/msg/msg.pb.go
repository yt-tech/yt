// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg/msg.proto

package msg

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MsgID int32

const (
	MsgID_UNKNOWN               MsgID = 0
	MsgID_ConnectID             MsgID = 1
	MsgID_ConnectAckID          MsgID = 2
	MsgID_SubscribeTopicID      MsgID = 3
	MsgID_SubscribeTopicAckID   MsgID = 4
	MsgID_UnsubscribeTopicID    MsgID = 5
	MsgID_UnsubscribeTopicAckID MsgID = 6
	MsgID_HoldMicID             MsgID = 7
	MsgID_HoldMIcAckID          MsgID = 8
	MsgID_ReleaseMicID          MsgID = 9
	MsgID_ReleaseMicAckID       MsgID = 10
	MsgID_DisconnectID          MsgID = 11
	MsgID_DisConnectAckID       MsgID = 12
	MsgID_AudioDataID           MsgID = 13
)

var MsgID_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "ConnectID",
	2:  "ConnectAckID",
	3:  "SubscribeTopicID",
	4:  "SubscribeTopicAckID",
	5:  "UnsubscribeTopicID",
	6:  "UnsubscribeTopicAckID",
	7:  "HoldMicID",
	8:  "HoldMIcAckID",
	9:  "ReleaseMicID",
	10: "ReleaseMicAckID",
	11: "DisconnectID",
	12: "DisConnectAckID",
	13: "AudioDataID",
}

var MsgID_value = map[string]int32{
	"UNKNOWN":               0,
	"ConnectID":             1,
	"ConnectAckID":          2,
	"SubscribeTopicID":      3,
	"SubscribeTopicAckID":   4,
	"UnsubscribeTopicID":    5,
	"UnsubscribeTopicAckID": 6,
	"HoldMicID":             7,
	"HoldMIcAckID":          8,
	"ReleaseMicID":          9,
	"ReleaseMicAckID":       10,
	"DisconnectID":          11,
	"DisConnectAckID":       12,
	"AudioDataID":           13,
}

func (x MsgID) String() string {
	return proto.EnumName(MsgID_name, int32(x))
}

func (MsgID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{0}
}

type Msg struct {
	Mid                  MsgID      `protobuf:"varint,1,opt,name=mid,proto3,enum=msg.MsgID" json:"mid,omitempty"`
	Command              *Command   `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	AudioData            *AudioData `protobuf:"bytes,4,opt,name=audioData,proto3" json:"audioData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{0}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetMid() MsgID {
	if m != nil {
		return m.Mid
	}
	return MsgID_UNKNOWN
}

func (m *Msg) GetCommand() *Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Msg) GetAudioData() *AudioData {
	if m != nil {
		return m.AudioData
	}
	return nil
}

type Command struct {
	Connect              *ConnectInfo             `protobuf:"bytes,1,opt,name=connect,proto3" json:"connect,omitempty"`
	ConnectAck           *ConnectAckInfo          `protobuf:"bytes,2,opt,name=connectAck,proto3" json:"connectAck,omitempty"`
	Subscribe            *SubscribeTopicInfo      `protobuf:"bytes,3,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	SubscribeAck         *SubscribeTopicAckInfo   `protobuf:"bytes,4,opt,name=subscribeAck,proto3" json:"subscribeAck,omitempty"`
	Unsbuscribe          *UnsubscribeTopicAckInfo `protobuf:"bytes,5,opt,name=unsbuscribe,proto3" json:"unsbuscribe,omitempty"`
	UnsbuscribeAck       *UnsubscribeTopicAckInfo `protobuf:"bytes,6,opt,name=unsbuscribeAck,proto3" json:"unsbuscribeAck,omitempty"`
	HoldMic              *HoldMicInfo             `protobuf:"bytes,7,opt,name=holdMic,proto3" json:"holdMic,omitempty"`
	HoldMicAck           *HoldMicAckInfo          `protobuf:"bytes,8,opt,name=holdMicAck,proto3" json:"holdMicAck,omitempty"`
	ReleaseMic           *ReleaseMicInfo          `protobuf:"bytes,9,opt,name=releaseMic,proto3" json:"releaseMic,omitempty"`
	ReleaseMicAck        *ReleaseMicAckInfo       `protobuf:"bytes,10,opt,name=releaseMicAck,proto3" json:"releaseMicAck,omitempty"`
	Disconnect           *DisconnectInfo          `protobuf:"bytes,11,opt,name=disconnect,proto3" json:"disconnect,omitempty"`
	DisconnectAck        *DisConnectAckInfo       `protobuf:"bytes,12,opt,name=disconnectAck,proto3" json:"disconnectAck,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{1}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetConnect() *ConnectInfo {
	if m != nil {
		return m.Connect
	}
	return nil
}

func (m *Command) GetConnectAck() *ConnectAckInfo {
	if m != nil {
		return m.ConnectAck
	}
	return nil
}

func (m *Command) GetSubscribe() *SubscribeTopicInfo {
	if m != nil {
		return m.Subscribe
	}
	return nil
}

func (m *Command) GetSubscribeAck() *SubscribeTopicAckInfo {
	if m != nil {
		return m.SubscribeAck
	}
	return nil
}

func (m *Command) GetUnsbuscribe() *UnsubscribeTopicAckInfo {
	if m != nil {
		return m.Unsbuscribe
	}
	return nil
}

func (m *Command) GetUnsbuscribeAck() *UnsubscribeTopicAckInfo {
	if m != nil {
		return m.UnsbuscribeAck
	}
	return nil
}

func (m *Command) GetHoldMic() *HoldMicInfo {
	if m != nil {
		return m.HoldMic
	}
	return nil
}

func (m *Command) GetHoldMicAck() *HoldMicAckInfo {
	if m != nil {
		return m.HoldMicAck
	}
	return nil
}

func (m *Command) GetReleaseMic() *ReleaseMicInfo {
	if m != nil {
		return m.ReleaseMic
	}
	return nil
}

func (m *Command) GetReleaseMicAck() *ReleaseMicAckInfo {
	if m != nil {
		return m.ReleaseMicAck
	}
	return nil
}

func (m *Command) GetDisconnect() *DisconnectInfo {
	if m != nil {
		return m.Disconnect
	}
	return nil
}

func (m *Command) GetDisconnectAck() *DisConnectAckInfo {
	if m != nil {
		return m.DisconnectAck
	}
	return nil
}

type AudioData struct {
	Id                   int32    `protobuf:"zigzag32,1,opt,name=id,proto3" json:"id,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AudioData) Reset()         { *m = AudioData{} }
func (m *AudioData) String() string { return proto.CompactTextString(m) }
func (*AudioData) ProtoMessage()    {}
func (*AudioData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{2}
}
func (m *AudioData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioData.Merge(m, src)
}
func (m *AudioData) XXX_Size() int {
	return m.Size()
}
func (m *AudioData) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioData.DiscardUnknown(m)
}

var xxx_messageInfo_AudioData proto.InternalMessageInfo

func (m *AudioData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AudioData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ConnectInfo struct {
	Uid                  uint32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectInfo) Reset()         { *m = ConnectInfo{} }
func (m *ConnectInfo) String() string { return proto.CompactTextString(m) }
func (*ConnectInfo) ProtoMessage()    {}
func (*ConnectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{3}
}
func (m *ConnectInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectInfo.Merge(m, src)
}
func (m *ConnectInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConnectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectInfo proto.InternalMessageInfo

func (m *ConnectInfo) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type ConnectAckInfo struct {
	Result               int32    `protobuf:"zigzag32,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectAckInfo) Reset()         { *m = ConnectAckInfo{} }
func (m *ConnectAckInfo) String() string { return proto.CompactTextString(m) }
func (*ConnectAckInfo) ProtoMessage()    {}
func (*ConnectAckInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{4}
}
func (m *ConnectAckInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectAckInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectAckInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectAckInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectAckInfo.Merge(m, src)
}
func (m *ConnectAckInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConnectAckInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectAckInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectAckInfo proto.InternalMessageInfo

func (m *ConnectAckInfo) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type SubscribeTopicInfo struct {
	Uid                  uint32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Tid                  uint32   `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeTopicInfo) Reset()         { *m = SubscribeTopicInfo{} }
func (m *SubscribeTopicInfo) String() string { return proto.CompactTextString(m) }
func (*SubscribeTopicInfo) ProtoMessage()    {}
func (*SubscribeTopicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{5}
}
func (m *SubscribeTopicInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeTopicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeTopicInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeTopicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeTopicInfo.Merge(m, src)
}
func (m *SubscribeTopicInfo) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeTopicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeTopicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeTopicInfo proto.InternalMessageInfo

func (m *SubscribeTopicInfo) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SubscribeTopicInfo) GetTid() uint32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type SubscribeTopicAckInfo struct {
	Result               int32    `protobuf:"zigzag32,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeTopicAckInfo) Reset()         { *m = SubscribeTopicAckInfo{} }
func (m *SubscribeTopicAckInfo) String() string { return proto.CompactTextString(m) }
func (*SubscribeTopicAckInfo) ProtoMessage()    {}
func (*SubscribeTopicAckInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{6}
}
func (m *SubscribeTopicAckInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeTopicAckInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeTopicAckInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeTopicAckInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeTopicAckInfo.Merge(m, src)
}
func (m *SubscribeTopicAckInfo) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeTopicAckInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeTopicAckInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeTopicAckInfo proto.InternalMessageInfo

func (m *SubscribeTopicAckInfo) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type UnsubscribeTopicInfo struct {
	Uid                  uint32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Tid                  uint32   `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnsubscribeTopicInfo) Reset()         { *m = UnsubscribeTopicInfo{} }
func (m *UnsubscribeTopicInfo) String() string { return proto.CompactTextString(m) }
func (*UnsubscribeTopicInfo) ProtoMessage()    {}
func (*UnsubscribeTopicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{7}
}
func (m *UnsubscribeTopicInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsubscribeTopicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsubscribeTopicInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsubscribeTopicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsubscribeTopicInfo.Merge(m, src)
}
func (m *UnsubscribeTopicInfo) XXX_Size() int {
	return m.Size()
}
func (m *UnsubscribeTopicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsubscribeTopicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UnsubscribeTopicInfo proto.InternalMessageInfo

func (m *UnsubscribeTopicInfo) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UnsubscribeTopicInfo) GetTid() uint32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type UnsubscribeTopicAckInfo struct {
	Result               int32    `protobuf:"zigzag32,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnsubscribeTopicAckInfo) Reset()         { *m = UnsubscribeTopicAckInfo{} }
func (m *UnsubscribeTopicAckInfo) String() string { return proto.CompactTextString(m) }
func (*UnsubscribeTopicAckInfo) ProtoMessage()    {}
func (*UnsubscribeTopicAckInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{8}
}
func (m *UnsubscribeTopicAckInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsubscribeTopicAckInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsubscribeTopicAckInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsubscribeTopicAckInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsubscribeTopicAckInfo.Merge(m, src)
}
func (m *UnsubscribeTopicAckInfo) XXX_Size() int {
	return m.Size()
}
func (m *UnsubscribeTopicAckInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsubscribeTopicAckInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UnsubscribeTopicAckInfo proto.InternalMessageInfo

func (m *UnsubscribeTopicAckInfo) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type HoldMicInfo struct {
	Uid                  uint32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Tid                  uint32   `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HoldMicInfo) Reset()         { *m = HoldMicInfo{} }
func (m *HoldMicInfo) String() string { return proto.CompactTextString(m) }
func (*HoldMicInfo) ProtoMessage()    {}
func (*HoldMicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{9}
}
func (m *HoldMicInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HoldMicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HoldMicInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HoldMicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HoldMicInfo.Merge(m, src)
}
func (m *HoldMicInfo) XXX_Size() int {
	return m.Size()
}
func (m *HoldMicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HoldMicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HoldMicInfo proto.InternalMessageInfo

func (m *HoldMicInfo) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *HoldMicInfo) GetTid() uint32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type HoldMicAckInfo struct {
	Result               int32    `protobuf:"zigzag32,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HoldMicAckInfo) Reset()         { *m = HoldMicAckInfo{} }
func (m *HoldMicAckInfo) String() string { return proto.CompactTextString(m) }
func (*HoldMicAckInfo) ProtoMessage()    {}
func (*HoldMicAckInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{10}
}
func (m *HoldMicAckInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HoldMicAckInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HoldMicAckInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HoldMicAckInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HoldMicAckInfo.Merge(m, src)
}
func (m *HoldMicAckInfo) XXX_Size() int {
	return m.Size()
}
func (m *HoldMicAckInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HoldMicAckInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HoldMicAckInfo proto.InternalMessageInfo

func (m *HoldMicAckInfo) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type ReleaseMicInfo struct {
	Uid                  uint32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Tid                  uint32   `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseMicInfo) Reset()         { *m = ReleaseMicInfo{} }
func (m *ReleaseMicInfo) String() string { return proto.CompactTextString(m) }
func (*ReleaseMicInfo) ProtoMessage()    {}
func (*ReleaseMicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{11}
}
func (m *ReleaseMicInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleaseMicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleaseMicInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleaseMicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseMicInfo.Merge(m, src)
}
func (m *ReleaseMicInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReleaseMicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseMicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseMicInfo proto.InternalMessageInfo

func (m *ReleaseMicInfo) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ReleaseMicInfo) GetTid() uint32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

type ReleaseMicAckInfo struct {
	Result               int32    `protobuf:"zigzag32,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseMicAckInfo) Reset()         { *m = ReleaseMicAckInfo{} }
func (m *ReleaseMicAckInfo) String() string { return proto.CompactTextString(m) }
func (*ReleaseMicAckInfo) ProtoMessage()    {}
func (*ReleaseMicAckInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{12}
}
func (m *ReleaseMicAckInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleaseMicAckInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleaseMicAckInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleaseMicAckInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseMicAckInfo.Merge(m, src)
}
func (m *ReleaseMicAckInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReleaseMicAckInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseMicAckInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseMicAckInfo proto.InternalMessageInfo

func (m *ReleaseMicAckInfo) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type DisconnectInfo struct {
	Uid                  uint32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisconnectInfo) Reset()         { *m = DisconnectInfo{} }
func (m *DisconnectInfo) String() string { return proto.CompactTextString(m) }
func (*DisconnectInfo) ProtoMessage()    {}
func (*DisconnectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{13}
}
func (m *DisconnectInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisconnectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisconnectInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisconnectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectInfo.Merge(m, src)
}
func (m *DisconnectInfo) XXX_Size() int {
	return m.Size()
}
func (m *DisconnectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectInfo proto.InternalMessageInfo

func (m *DisconnectInfo) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type DisConnectAckInfo struct {
	Result               int32    `protobuf:"zigzag32,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisConnectAckInfo) Reset()         { *m = DisConnectAckInfo{} }
func (m *DisConnectAckInfo) String() string { return proto.CompactTextString(m) }
func (*DisConnectAckInfo) ProtoMessage()    {}
func (*DisConnectAckInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{14}
}
func (m *DisConnectAckInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisConnectAckInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisConnectAckInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisConnectAckInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisConnectAckInfo.Merge(m, src)
}
func (m *DisConnectAckInfo) XXX_Size() int {
	return m.Size()
}
func (m *DisConnectAckInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DisConnectAckInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DisConnectAckInfo proto.InternalMessageInfo

func (m *DisConnectAckInfo) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterEnum("msg.MsgID", MsgID_name, MsgID_value)
	proto.RegisterType((*Msg)(nil), "msg.Msg")
	proto.RegisterType((*Command)(nil), "msg.Command")
	proto.RegisterType((*AudioData)(nil), "msg.AudioData")
	proto.RegisterType((*ConnectInfo)(nil), "msg.ConnectInfo")
	proto.RegisterType((*ConnectAckInfo)(nil), "msg.ConnectAckInfo")
	proto.RegisterType((*SubscribeTopicInfo)(nil), "msg.SubscribeTopicInfo")
	proto.RegisterType((*SubscribeTopicAckInfo)(nil), "msg.SubscribeTopicAckInfo")
	proto.RegisterType((*UnsubscribeTopicInfo)(nil), "msg.UnsubscribeTopicInfo")
	proto.RegisterType((*UnsubscribeTopicAckInfo)(nil), "msg.UnsubscribeTopicAckInfo")
	proto.RegisterType((*HoldMicInfo)(nil), "msg.HoldMicInfo")
	proto.RegisterType((*HoldMicAckInfo)(nil), "msg.HoldMicAckInfo")
	proto.RegisterType((*ReleaseMicInfo)(nil), "msg.ReleaseMicInfo")
	proto.RegisterType((*ReleaseMicAckInfo)(nil), "msg.ReleaseMicAckInfo")
	proto.RegisterType((*DisconnectInfo)(nil), "msg.DisconnectInfo")
	proto.RegisterType((*DisConnectAckInfo)(nil), "msg.DisConnectAckInfo")
}

func init() { proto.RegisterFile("msg/msg.proto", fileDescriptor_d0f0a1b324c95b77) }

var fileDescriptor_d0f0a1b324c95b77 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x93, 0x26, 0x69, 0xc6, 0x89, 0xbb, 0x9d, 0xfe, 0x05, 0x54, 0x85, 0xca, 0x07, 0x14,
	0xb5, 0xa8, 0x55, 0x5b, 0x90, 0x10, 0x42, 0x95, 0x0a, 0x7b, 0x68, 0x84, 0x5a, 0x24, 0x43, 0xc5,
	0x39, 0xb1, 0x43, 0xb0, 0xda, 0xd8, 0x55, 0x36, 0x3e, 0xf0, 0x24, 0xf0, 0x14, 0x3c, 0x07, 0x47,
	0x1e, 0x01, 0x85, 0x17, 0x41, 0xb3, 0x5e, 0xdb, 0xeb, 0x38, 0x96, 0x72, 0xdb, 0xf9, 0xf2, 0x7d,
	0xf3, 0x6d, 0x66, 0xbe, 0x4d, 0xa0, 0x3d, 0x11, 0xe3, 0xd3, 0x89, 0x18, 0x9f, 0x3c, 0x4e, 0xc3,
	0x59, 0x88, 0xd5, 0x89, 0x18, 0xdb, 0xdf, 0xa1, 0x7a, 0x23, 0xc6, 0x78, 0x00, 0xd5, 0x89, 0xef,
	0x75, 0x8c, 0x43, 0xa3, 0x67, 0x9d, 0xc3, 0x09, 0x91, 0x6e, 0xc4, 0xb8, 0xcf, 0x1d, 0x82, 0xf1,
	0x39, 0x34, 0xdc, 0x70, 0x32, 0x19, 0x04, 0x5e, 0xa7, 0x72, 0x68, 0xf4, 0xcc, 0xf3, 0x96, 0x64,
	0xbc, 0x8f, 0x31, 0x27, 0xf9, 0x10, 0x5f, 0x40, 0x73, 0x10, 0x79, 0x7e, 0xc8, 0x07, 0xb3, 0x41,
	0x67, 0x5d, 0x32, 0x2d, 0xc9, 0xbc, 0x4a, 0x50, 0x27, 0x23, 0xd8, 0xbf, 0x6a, 0xd0, 0x50, 0x2d,
	0xf0, 0x88, 0x1c, 0x82, 0x60, 0xe4, 0xce, 0xe4, 0x1d, 0xcc, 0x73, 0xa6, 0x1c, 0x24, 0xd6, 0x0f,
	0xbe, 0x86, 0x4e, 0x42, 0xc0, 0x0b, 0x00, 0x75, 0xbc, 0x72, 0xef, 0xd5, 0x85, 0xb6, 0x75, 0xfa,
	0x95, 0x7b, 0x2f, 0x15, 0x1a, 0x0d, 0x5f, 0x41, 0x53, 0x44, 0x43, 0xe1, 0x4e, 0xfd, 0xe1, 0xa8,
	0x53, 0x95, 0x9a, 0x7d, 0xa9, 0xf9, 0x94, 0xa0, 0x9f, 0xc3, 0x47, 0xdf, 0x95, 0xba, 0x8c, 0x89,
	0x97, 0xd0, 0x4a, 0x0b, 0x72, 0x8b, 0xbf, 0xd4, 0xd3, 0x25, 0xca, 0xc4, 0x34, 0xc7, 0xc7, 0x4b,
	0x30, 0xa3, 0x40, 0x0c, 0x23, 0x65, 0x5c, 0x93, 0xf2, 0x03, 0x29, 0xbf, 0x0b, 0xc4, 0xd2, 0x06,
	0xba, 0x00, 0x39, 0x58, 0x5a, 0x49, 0x37, 0xa8, 0xaf, 0xd0, 0x62, 0x41, 0x43, 0xd3, 0xfd, 0x16,
	0x3e, 0x78, 0x37, 0xbe, 0xdb, 0x69, 0x68, 0xd3, 0xbd, 0x8e, 0xb1, 0x78, 0xba, 0x8a, 0x40, 0xd3,
	0x55, 0x47, 0x72, 0xdb, 0xd0, 0xa6, 0x7b, 0x9d, 0xc2, 0xf1, 0x74, 0x33, 0x1a, 0x89, 0xa6, 0xa3,
	0x87, 0xd1, 0x40, 0x8c, 0xc8, 0xa3, 0xa9, 0x89, 0x9c, 0x14, 0x8e, 0x45, 0x19, 0x0d, 0xdf, 0x42,
	0x3b, 0xab, 0xc8, 0x0c, 0xa4, 0x6e, 0x6f, 0x41, 0x97, 0xf8, 0xe5, 0xc9, 0x64, 0xe9, 0xf9, 0x22,
	0x09, 0x8d, 0xa9, 0x59, 0xf2, 0x14, 0x8e, 0x2d, 0x33, 0x1a, 0x59, 0x66, 0x15, 0x59, 0xb6, 0x34,
	0x4b, 0xee, 0x8b, 0x85, 0x00, 0xe5, 0xc9, 0xf6, 0x29, 0x34, 0xd3, 0x20, 0xa3, 0x05, 0x15, 0xf5,
	0x60, 0xb6, 0x9c, 0x8a, 0xef, 0x21, 0xc2, 0xba, 0x47, 0xb1, 0xa7, 0x3c, 0xb6, 0x1c, 0x79, 0xb6,
	0x9f, 0x81, 0xa9, 0x25, 0x18, 0x19, 0x54, 0x23, 0xa5, 0x69, 0x3b, 0x74, 0xb4, 0x7b, 0x60, 0xe5,
	0x2d, 0x71, 0x0f, 0xea, 0xd3, 0x91, 0x88, 0x1e, 0x66, 0xaa, 0xb5, 0xaa, 0xec, 0xd7, 0x80, 0xc5,
	0xa4, 0x16, 0x3b, 0x12, 0x32, 0xf3, 0xe3, 0x67, 0xda, 0x76, 0xe8, 0x68, 0x9f, 0xc2, 0xee, 0xd2,
	0xa4, 0x96, 0x5a, 0xbd, 0x81, 0x9d, 0xc5, 0x60, 0xad, 0x6c, 0x76, 0x06, 0xfb, 0x25, 0xa1, 0x2c,
	0xb5, 0x3b, 0x03, 0x53, 0x0b, 0xe2, 0x4a, 0x2e, 0x3d, 0xb0, 0xf2, 0x61, 0x2c, 0x6d, 0xfe, 0x12,
	0xac, 0x7c, 0x02, 0x57, 0xea, 0x7f, 0x0c, 0x5b, 0x85, 0xfc, 0x95, 0x5a, 0xd8, 0x60, 0xe5, 0x13,
	0xb7, 0x64, 0xcf, 0xc7, 0xb0, 0x55, 0x48, 0x57, 0x59, 0xc3, 0xa3, 0x1f, 0x15, 0xa8, 0xc9, 0x1f,
	0x5f, 0x34, 0xa1, 0x71, 0x77, 0xfb, 0xe1, 0xf6, 0xe3, 0x97, 0x5b, 0xb6, 0x86, 0x6d, 0x68, 0x26,
	0x61, 0xe2, 0xcc, 0x40, 0x06, 0x2d, 0xad, 0x1f, 0x67, 0x15, 0xdc, 0x01, 0xb6, 0x10, 0x11, 0xce,
	0xaa, 0xb8, 0x0f, 0xdb, 0xc5, 0xf5, 0x73, 0xb6, 0x8e, 0x7b, 0x80, 0x85, 0x35, 0x73, 0x56, 0xc3,
	0x27, 0xb0, 0xbb, 0x6c, 0x85, 0x9c, 0xd5, 0xe9, 0x0a, 0xc9, 0xaa, 0x38, 0x6b, 0xd0, 0x15, 0x64,
	0xd9, 0x57, 0x84, 0x0d, 0x42, 0xb4, 0x71, 0x73, 0xd6, 0xc4, 0x6d, 0xd8, 0xcc, 0x8f, 0x92, 0x33,
	0x20, 0x9a, 0x36, 0x32, 0xce, 0x4c, 0xa2, 0xe5, 0x07, 0xc4, 0x59, 0x0b, 0x37, 0xc1, 0x4c, 0xdf,
	0x5b, 0x9f, 0xb3, 0xf6, 0x3b, 0xf6, 0x7b, 0xde, 0x35, 0xfe, 0xcc, 0xbb, 0xc6, 0xdf, 0x79, 0xd7,
	0xf8, 0xf9, 0xaf, 0xbb, 0x36, 0xac, 0xcb, 0xbf, 0xb2, 0x8b, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x48, 0x09, 0x1d, 0x65, 0xdb, 0x06, 0x00, 0x00,
}

func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AudioData != nil {
		{
			size, err := m.AudioData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DisconnectAck != nil {
		{
			size, err := m.DisconnectAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Disconnect != nil {
		{
			size, err := m.Disconnect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ReleaseMicAck != nil {
		{
			size, err := m.ReleaseMicAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ReleaseMic != nil {
		{
			size, err := m.ReleaseMic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.HoldMicAck != nil {
		{
			size, err := m.HoldMicAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.HoldMic != nil {
		{
			size, err := m.HoldMic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.UnsbuscribeAck != nil {
		{
			size, err := m.UnsbuscribeAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Unsbuscribe != nil {
		{
			size, err := m.Unsbuscribe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SubscribeAck != nil {
		{
			size, err := m.SubscribeAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Subscribe != nil {
		{
			size, err := m.Subscribe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ConnectAck != nil {
		{
			size, err := m.ConnectAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Connect != nil {
		{
			size, err := m.Connect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AudioData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMsg(dAtA, i, uint64((uint32(m.Id)<<1)^uint32((m.Id>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConnectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Uid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConnectAckInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectAckInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectAckInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != 0 {
		i = encodeVarintMsg(dAtA, i, uint64((uint32(m.Result)<<1)^uint32((m.Result>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeTopicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeTopicInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeTopicInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Tid))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeTopicAckInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeTopicAckInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeTopicAckInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != 0 {
		i = encodeVarintMsg(dAtA, i, uint64((uint32(m.Result)<<1)^uint32((m.Result>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnsubscribeTopicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsubscribeTopicInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsubscribeTopicInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Tid))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnsubscribeTopicAckInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsubscribeTopicAckInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsubscribeTopicAckInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != 0 {
		i = encodeVarintMsg(dAtA, i, uint64((uint32(m.Result)<<1)^uint32((m.Result>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HoldMicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HoldMicInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HoldMicInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Tid))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HoldMicAckInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HoldMicAckInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HoldMicAckInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != 0 {
		i = encodeVarintMsg(dAtA, i, uint64((uint32(m.Result)<<1)^uint32((m.Result>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReleaseMicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleaseMicInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleaseMicInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Tid))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReleaseMicAckInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleaseMicAckInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleaseMicAckInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != 0 {
		i = encodeVarintMsg(dAtA, i, uint64((uint32(m.Result)<<1)^uint32((m.Result>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DisconnectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisconnectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisconnectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Uid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DisConnectAckInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisConnectAckInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisConnectAckInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != 0 {
		i = encodeVarintMsg(dAtA, i, uint64((uint32(m.Result)<<1)^uint32((m.Result>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovMsg(uint64(m.Mid))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.AudioData != nil {
		l = m.AudioData.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Connect != nil {
		l = m.Connect.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ConnectAck != nil {
		l = m.ConnectAck.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Subscribe != nil {
		l = m.Subscribe.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.SubscribeAck != nil {
		l = m.SubscribeAck.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Unsbuscribe != nil {
		l = m.Unsbuscribe.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.UnsbuscribeAck != nil {
		l = m.UnsbuscribeAck.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.HoldMic != nil {
		l = m.HoldMic.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.HoldMicAck != nil {
		l = m.HoldMicAck.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ReleaseMic != nil {
		l = m.ReleaseMic.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.ReleaseMicAck != nil {
		l = m.ReleaseMicAck.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Disconnect != nil {
		l = m.Disconnect.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.DisconnectAck != nil {
		l = m.DisconnectAck.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AudioData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sozMsg(uint64(m.Id))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMsg(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectAckInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sozMsg(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeTopicInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMsg(uint64(m.Uid))
	}
	if m.Tid != 0 {
		n += 1 + sovMsg(uint64(m.Tid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeTopicAckInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sozMsg(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnsubscribeTopicInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMsg(uint64(m.Uid))
	}
	if m.Tid != 0 {
		n += 1 + sovMsg(uint64(m.Tid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnsubscribeTopicAckInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sozMsg(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HoldMicInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMsg(uint64(m.Uid))
	}
	if m.Tid != 0 {
		n += 1 + sovMsg(uint64(m.Tid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HoldMicAckInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sozMsg(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReleaseMicInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMsg(uint64(m.Uid))
	}
	if m.Tid != 0 {
		n += 1 + sovMsg(uint64(m.Tid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReleaseMicAckInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sozMsg(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DisconnectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMsg(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DisConnectAckInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sozMsg(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= MsgID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudioData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AudioData == nil {
				m.AudioData = &AudioData{}
			}
			if err := m.AudioData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Connect == nil {
				m.Connect = &ConnectInfo{}
			}
			if err := m.Connect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnectAck == nil {
				m.ConnectAck = &ConnectAckInfo{}
			}
			if err := m.ConnectAck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subscribe == nil {
				m.Subscribe = &SubscribeTopicInfo{}
			}
			if err := m.Subscribe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscribeAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubscribeAck == nil {
				m.SubscribeAck = &SubscribeTopicAckInfo{}
			}
			if err := m.SubscribeAck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsbuscribe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unsbuscribe == nil {
				m.Unsbuscribe = &UnsubscribeTopicAckInfo{}
			}
			if err := m.Unsbuscribe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsbuscribeAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnsbuscribeAck == nil {
				m.UnsbuscribeAck = &UnsubscribeTopicAckInfo{}
			}
			if err := m.UnsbuscribeAck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldMic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HoldMic == nil {
				m.HoldMic = &HoldMicInfo{}
			}
			if err := m.HoldMic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldMicAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HoldMicAck == nil {
				m.HoldMicAck = &HoldMicAckInfo{}
			}
			if err := m.HoldMicAck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseMic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReleaseMic == nil {
				m.ReleaseMic = &ReleaseMicInfo{}
			}
			if err := m.ReleaseMic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseMicAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReleaseMicAck == nil {
				m.ReleaseMicAck = &ReleaseMicAckInfo{}
			}
			if err := m.ReleaseMicAck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disconnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Disconnect == nil {
				m.Disconnect = &DisconnectInfo{}
			}
			if err := m.Disconnect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisconnectAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisconnectAck == nil {
				m.DisconnectAck = &DisConnectAckInfo{}
			}
			if err := m.DisconnectAck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Id = v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectAckInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectAckInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectAckInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Result = v
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeTopicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeTopicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeTopicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeTopicAckInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeTopicAckInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeTopicAckInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Result = v
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsubscribeTopicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsubscribeTopicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsubscribeTopicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsubscribeTopicAckInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsubscribeTopicAckInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsubscribeTopicAckInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Result = v
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HoldMicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HoldMicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HoldMicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HoldMicAckInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HoldMicAckInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HoldMicAckInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Result = v
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleaseMicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleaseMicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleaseMicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleaseMicAckInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleaseMicAckInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleaseMicAckInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Result = v
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisconnectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisconnectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisconnectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisConnectAckInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisConnectAckInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisConnectAckInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Result = v
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMsg
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg   = fmt.Errorf("proto: integer overflow")
)
