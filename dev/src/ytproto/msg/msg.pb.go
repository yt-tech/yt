// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg/msg.proto

package msg

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CMDID int32

const (
	CMDID_UNKNOWN             CMDID = 0
	CMDID_SignIn              CMDID = 1
	CMDID_SignInAck           CMDID = 2
	CMDID_SubscribeTopic      CMDID = 3
	CMDID_SubscribeTopicAck   CMDID = 4
	CMDID_UnsubscribeTopic    CMDID = 5
	CMDID_UnsubscribeTopicAck CMDID = 6
	CMDID_HoldMic             CMDID = 7
	CMDID_HoldMicAck          CMDID = 8
	CMDID_ReleaseMic          CMDID = 9
	CMDID_ReleaseMicAck       CMDID = 10
	CMDID_SignOut             CMDID = 19
	CMDID_SignOutAck          CMDID = 21
	CMDID_Audio               CMDID = 13
	CMDID_Ping                CMDID = 14
	CMDID_Pong                CMDID = 15
	CMDID_RemoveMic           CMDID = 16
	CMDID_RemoveMicAck        CMDID = 17
)

var CMDID_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "SignIn",
	2:  "SignInAck",
	3:  "SubscribeTopic",
	4:  "SubscribeTopicAck",
	5:  "UnsubscribeTopic",
	6:  "UnsubscribeTopicAck",
	7:  "HoldMic",
	8:  "HoldMicAck",
	9:  "ReleaseMic",
	10: "ReleaseMicAck",
	19: "SignOut",
	21: "SignOutAck",
	13: "Audio",
	14: "Ping",
	15: "Pong",
	16: "RemoveMic",
	17: "RemoveMicAck",
}

var CMDID_value = map[string]int32{
	"UNKNOWN":             0,
	"SignIn":              1,
	"SignInAck":           2,
	"SubscribeTopic":      3,
	"SubscribeTopicAck":   4,
	"UnsubscribeTopic":    5,
	"UnsubscribeTopicAck": 6,
	"HoldMic":             7,
	"HoldMicAck":          8,
	"ReleaseMic":          9,
	"ReleaseMicAck":       10,
	"SignOut":             19,
	"SignOutAck":          21,
	"Audio":               13,
	"Ping":                14,
	"Pong":                15,
	"RemoveMic":           16,
	"RemoveMicAck":        17,
}

func (x CMDID) String() string {
	return proto.EnumName(CMDID_name, int32(x))
}

func (CMDID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{0}
}

type Msg struct {
	Version              int32      `protobuf:"zigzag32,1,opt,name=version,proto3" json:"version,omitempty"`
	Mid                  uint32     `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	CmdID                CMDID      `protobuf:"varint,3,opt,name=cmdID,proto3,enum=msg.CMDID" json:"cmdID,omitempty"`
	Uid                  uint32     `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Tid                  uint32     `protobuf:"varint,5,opt,name=tid,proto3" json:"tid,omitempty"`
	AudioData            *AudioData `protobuf:"bytes,6,opt,name=audioData,proto3" json:"audioData,omitempty"`
	AckCode              int32      `protobuf:"zigzag32,7,opt,name=ackCode,proto3" json:"ackCode,omitempty"`
	Token                string     `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{0}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Msg) GetMid() uint32 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Msg) GetCmdID() CMDID {
	if m != nil {
		return m.CmdID
	}
	return CMDID_UNKNOWN
}

func (m *Msg) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Msg) GetTid() uint32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *Msg) GetAudioData() *AudioData {
	if m != nil {
		return m.AudioData
	}
	return nil
}

func (m *Msg) GetAckCode() int32 {
	if m != nil {
		return m.AckCode
	}
	return 0
}

func (m *Msg) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AudioData struct {
	Id                   int32    `protobuf:"zigzag32,1,opt,name=id,proto3" json:"id,omitempty"`
	Tpye                 int32    `protobuf:"zigzag32,2,opt,name=tpye,proto3" json:"tpye,omitempty"`
	Timestamp            uint64   `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data                 []byte   `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AudioData) Reset()         { *m = AudioData{} }
func (m *AudioData) String() string { return proto.CompactTextString(m) }
func (*AudioData) ProtoMessage()    {}
func (*AudioData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{1}
}
func (m *AudioData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioData.Merge(m, src)
}
func (m *AudioData) XXX_Size() int {
	return m.Size()
}
func (m *AudioData) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioData.DiscardUnknown(m)
}

var xxx_messageInfo_AudioData proto.InternalMessageInfo

func (m *AudioData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AudioData) GetTpye() int32 {
	if m != nil {
		return m.Tpye
	}
	return 0
}

func (m *AudioData) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AudioData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("msg.CMDID", CMDID_name, CMDID_value)
	proto.RegisterType((*Msg)(nil), "msg.Msg")
	proto.RegisterType((*AudioData)(nil), "msg.AudioData")
}

func init() { proto.RegisterFile("msg/msg.proto", fileDescriptor_d0f0a1b324c95b77) }

var fileDescriptor_d0f0a1b324c95b77 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0xcd, 0x5a, 0x92, 0x6d, 0x4d, 0x22, 0x75, 0x35, 0x49, 0xa8, 0x0e, 0xc5, 0x88, 0x9c, 0x44,
	0x29, 0x29, 0xa4, 0x5f, 0x90, 0xc6, 0x87, 0x9a, 0x62, 0xa7, 0x6c, 0x1a, 0x7a, 0x96, 0xb5, 0x8b,
	0x58, 0x1c, 0x69, 0x8d, 0xb5, 0x0a, 0xf4, 0x4f, 0xfa, 0x05, 0xfd, 0x96, 0x1e, 0x7b, 0xe9, 0xbd,
	0xb8, 0x3f, 0x52, 0x66, 0x65, 0xc7, 0x24, 0xb7, 0xf7, 0xde, 0xbc, 0x37, 0xbc, 0x59, 0x16, 0xa2,
	0xba, 0xad, 0xde, 0xd7, 0x6d, 0x75, 0xb9, 0xde, 0x18, 0x6b, 0xd0, 0xab, 0xdb, 0xea, 0xe2, 0x0f,
	0x03, 0x6f, 0xde, 0x56, 0x98, 0xc2, 0xe8, 0x51, 0x6d, 0x5a, 0x6d, 0x9a, 0x94, 0x65, 0x2c, 0x4f,
	0xc4, 0x9e, 0x22, 0x07, 0xaf, 0xd6, 0x32, 0x1d, 0x64, 0x2c, 0x8f, 0x04, 0x41, 0xcc, 0x20, 0x28,
	0x6b, 0x39, 0x9b, 0xa6, 0x5e, 0xc6, 0xf2, 0xf8, 0x0a, 0x2e, 0x69, 0xe7, 0xcd, 0x7c, 0x3a, 0x9b,
	0x8a, 0x7e, 0x40, 0x99, 0x4e, 0xcb, 0xd4, 0xef, 0x33, 0x9d, 0x96, 0xa4, 0x58, 0x2d, 0xd3, 0xa0,
	0x57, 0xac, 0x96, 0xf8, 0x0e, 0xc2, 0xa2, 0x93, 0xda, 0x4c, 0x0b, 0x5b, 0xa4, 0xc3, 0x8c, 0xe5,
	0xc7, 0x57, 0xb1, 0xdb, 0x74, 0xbd, 0x57, 0xc5, 0xc1, 0x40, 0xfd, 0x8a, 0x72, 0x75, 0x63, 0xa4,
	0x4a, 0x47, 0x7d, 0xbf, 0x1d, 0xc5, 0x33, 0x08, 0xac, 0x59, 0xa9, 0x26, 0x1d, 0x67, 0x2c, 0x0f,
	0x45, 0x4f, 0x2e, 0x0a, 0x08, 0x9f, 0xf6, 0x60, 0x0c, 0x03, 0x2d, 0x77, 0x77, 0x0d, 0xb4, 0x44,
	0x04, 0xdf, 0xae, 0xbf, 0x2b, 0x77, 0x53, 0x22, 0x1c, 0xc6, 0x37, 0x10, 0x5a, 0x5d, 0xab, 0xd6,
	0x16, 0xf5, 0xda, 0xd5, 0xf4, 0xc5, 0x41, 0xa0, 0x84, 0xdc, 0xf7, 0x3c, 0x11, 0x0e, 0xbf, 0xfd,
	0x39, 0x80, 0xc0, 0x5d, 0x8d, 0xc7, 0x30, 0xba, 0x5f, 0x7c, 0x5e, 0xdc, 0x7e, 0x5b, 0xf0, 0x23,
	0x04, 0x18, 0xde, 0xe9, 0xaa, 0x99, 0x35, 0x9c, 0x61, 0x04, 0x61, 0x8f, 0xaf, 0xcb, 0x15, 0x1f,
	0x20, 0x42, 0x7c, 0xd7, 0x2d, 0xdb, 0x72, 0xa3, 0x97, 0xea, 0xab, 0x59, 0xeb, 0x92, 0x7b, 0x78,
	0x0e, 0xc9, 0x73, 0x8d, 0xac, 0x3e, 0x9e, 0x01, 0xbf, 0x6f, 0xda, 0xe7, 0xe6, 0x00, 0x5f, 0xc3,
	0xe9, 0x4b, 0x95, 0xec, 0x43, 0x6a, 0xf0, 0xc9, 0x3c, 0xc8, 0xb9, 0x2e, 0xf9, 0x08, 0x63, 0x80,
	0x1d, 0xa1, 0xe1, 0x98, 0xb8, 0x50, 0x0f, 0xaa, 0x68, 0x15, 0xcd, 0x43, 0x4c, 0x20, 0x3a, 0x70,
	0xb2, 0x00, 0xe5, 0xa9, 0xe8, 0x6d, 0x67, 0xf9, 0x29, 0xf9, 0x77, 0x84, 0x86, 0xe7, 0x18, 0x42,
	0xe0, 0xde, 0x92, 0x47, 0x38, 0x06, 0xff, 0x8b, 0x6e, 0x2a, 0x1e, 0x3b, 0x64, 0x9a, 0x8a, 0xbf,
	0xa2, 0x23, 0x85, 0xaa, 0xcd, 0xa3, 0xdb, 0xce, 0x91, 0xc3, 0xc9, 0x13, 0xa5, 0x7c, 0xf2, 0x91,
	0xff, 0xda, 0x4e, 0xd8, 0xef, 0xed, 0x84, 0xfd, 0xdd, 0x4e, 0xd8, 0x8f, 0x7f, 0x93, 0xa3, 0xe5,
	0xd0, 0xfd, 0xc0, 0x0f, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x25, 0xac, 0x0b, 0x97, 0x92, 0x02,
	0x00, 0x00,
}

func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x42
	}
	if m.AckCode != 0 {
		i = encodeVarintMsg(dAtA, i, uint64((uint32(m.AckCode)<<1)^uint32((m.AckCode>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.AudioData != nil {
		{
			size, err := m.AudioData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Tid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Tid))
		i--
		dAtA[i] = 0x28
	}
	if m.Uid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x20
	}
	if m.CmdID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.CmdID))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintMsg(dAtA, i, uint64((uint32(m.Version)<<1)^uint32((m.Version>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AudioData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if m.Timestamp != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.Tpye != 0 {
		i = encodeVarintMsg(dAtA, i, uint64((uint32(m.Tpye)<<1)^uint32((m.Tpye>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMsg(dAtA, i, uint64((uint32(m.Id)<<1)^uint32((m.Id>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sozMsg(uint64(m.Version))
	}
	if m.Mid != 0 {
		n += 1 + sovMsg(uint64(m.Mid))
	}
	if m.CmdID != 0 {
		n += 1 + sovMsg(uint64(m.CmdID))
	}
	if m.Uid != 0 {
		n += 1 + sovMsg(uint64(m.Uid))
	}
	if m.Tid != 0 {
		n += 1 + sovMsg(uint64(m.Tid))
	}
	if m.AudioData != nil {
		l = m.AudioData.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.AckCode != 0 {
		n += 1 + sozMsg(uint64(m.AckCode))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AudioData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sozMsg(uint64(m.Id))
	}
	if m.Tpye != 0 {
		n += 1 + sozMsg(uint64(m.Tpye))
	}
	if m.Timestamp != 0 {
		n += 1 + sovMsg(uint64(m.Timestamp))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Version = v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdID", wireType)
			}
			m.CmdID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdID |= CMDID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudioData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AudioData == nil {
				m.AudioData = &AudioData{}
			}
			if err := m.AudioData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.AckCode = v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Id = v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tpye", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Tpye = v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMsg
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg   = fmt.Errorf("proto: integer overflow")
)
