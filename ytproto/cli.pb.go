// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cli.proto

//包名，通过protoc生成时go文件时

package ytproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//协议类型
type ActionType int32

const (
	ActionType_UNKNOWN        ActionType = 0
	ActionType_CONNECT        ActionType = 1
	ActionType_CONNECTACK     ActionType = 2
	ActionType_JOINGROUP      ActionType = 3
	ActionType_JOINGROUPACK   ActionType = 4
	ActionType_LEAVERGROUP    ActionType = 5
	ActionType_LEAVERGROUPACK ActionType = 6
	ActionType_HOLDMIC        ActionType = 7
	ActionType_HOLDMICACK     ActionType = 8
	ActionType_RELEASEMIC     ActionType = 9
	ActionType_RELEASEMICACK  ActionType = 10
	ActionType_DISCONNECT     ActionType = 11
	ActionType_DISCONNECTACK  ActionType = 12
	ActionType_REGISTER       ActionType = 13
	ActionType_REGISTERACK    ActionType = 14
	ActionType_SYSTEM         ActionType = 15
	ActionType_SYSTEMACK      ActionType = 16
)

var ActionType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "CONNECT",
	2:  "CONNECTACK",
	3:  "JOINGROUP",
	4:  "JOINGROUPACK",
	5:  "LEAVERGROUP",
	6:  "LEAVERGROUPACK",
	7:  "HOLDMIC",
	8:  "HOLDMICACK",
	9:  "RELEASEMIC",
	10: "RELEASEMICACK",
	11: "DISCONNECT",
	12: "DISCONNECTACK",
	13: "REGISTER",
	14: "REGISTERACK",
	15: "SYSTEM",
	16: "SYSTEMACK",
}

var ActionType_value = map[string]int32{
	"UNKNOWN":        0,
	"CONNECT":        1,
	"CONNECTACK":     2,
	"JOINGROUP":      3,
	"JOINGROUPACK":   4,
	"LEAVERGROUP":    5,
	"LEAVERGROUPACK": 6,
	"HOLDMIC":        7,
	"HOLDMICACK":     8,
	"RELEASEMIC":     9,
	"RELEASEMICACK":  10,
	"DISCONNECT":     11,
	"DISCONNECTACK":  12,
	"REGISTER":       13,
	"REGISTERACK":    14,
	"SYSTEM":         15,
	"SYSTEMACK":      16,
}

func (x ActionType) String() string {
	return proto.EnumName(ActionType_name, int32(x))
}

func (ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_81159ba547ea6f30, []int{0}
}

type ActionRequest struct {
	ActionID             ActionType `protobuf:"varint,1,opt,name=actionID,proto3,enum=ytproto.ActionType" json:"actionID,omitempty"`
	Ack                  int32      `protobuf:"zigzag32,2,opt,name=ack,proto3" json:"ack,omitempty"`
	Uid                  uint64     `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid                  uint64     `protobuf:"varint,4,opt,name=gid,proto3" json:"gid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ActionRequest) Reset()         { *m = ActionRequest{} }
func (m *ActionRequest) String() string { return proto.CompactTextString(m) }
func (*ActionRequest) ProtoMessage()    {}
func (*ActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81159ba547ea6f30, []int{0}
}
func (m *ActionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionRequest.Merge(m, src)
}
func (m *ActionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ActionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ActionRequest proto.InternalMessageInfo

func (m *ActionRequest) GetActionID() ActionType {
	if m != nil {
		return m.ActionID
	}
	return ActionType_UNKNOWN
}

func (m *ActionRequest) GetAck() int32 {
	if m != nil {
		return m.Ack
	}
	return 0
}

func (m *ActionRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ActionRequest) GetGid() uint64 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func init() {
	proto.RegisterEnum("ytproto.ActionType", ActionType_name, ActionType_value)
	proto.RegisterType((*ActionRequest)(nil), "ytproto.ActionRequest")
}

func init() { proto.RegisterFile("cli.proto", fileDescriptor_81159ba547ea6f30) }

var fileDescriptor_81159ba547ea6f30 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcd, 0x4e, 0xc2, 0x40,
	0x14, 0x85, 0x19, 0x40, 0x7e, 0x2e, 0xb4, 0x0c, 0xd7, 0x4d, 0x57, 0x0d, 0x71, 0x45, 0x5c, 0x60,
	0xa2, 0x4f, 0x50, 0xcb, 0x04, 0x2b, 0x30, 0x35, 0xd3, 0xa2, 0x71, 0x89, 0xb4, 0x21, 0x8d, 0xc6,
	0xa2, 0x16, 0x13, 0xde, 0x44, 0xdf, 0xc8, 0xa5, 0x8f, 0x60, 0xea, 0x8b, 0x98, 0xdb, 0x16, 0xea,
	0xee, 0x7c, 0xe7, 0x7c, 0xe9, 0x4c, 0x07, 0xda, 0xab, 0xa7, 0x68, 0xb4, 0x79, 0x8d, 0x93, 0x18,
	0x9b, 0xbb, 0x24, 0x0b, 0x27, 0xef, 0xa0, 0x59, 0xab, 0x24, 0x8a, 0x9f, 0x55, 0xf8, 0xb2, 0x0d,
	0xdf, 0x12, 0x3c, 0x83, 0xd6, 0x32, 0x2b, 0x9c, 0xb1, 0xc1, 0x06, 0x6c, 0xa8, 0x9f, 0x1f, 0x8f,
	0x0a, 0x79, 0x94, 0x9b, 0xfe, 0x6e, 0x13, 0xaa, 0x83, 0x84, 0x1c, 0x6a, 0xcb, 0xd5, 0xa3, 0x51,
	0x1d, 0xb0, 0x61, 0x5f, 0x51, 0xa4, 0x66, 0x1b, 0x05, 0x46, 0x6d, 0xc0, 0x86, 0x75, 0x45, 0x91,
	0x9a, 0x75, 0x14, 0x18, 0xf5, 0xbc, 0x59, 0x47, 0xc1, 0xe9, 0x67, 0x15, 0xa0, 0xfc, 0x1c, 0x76,
	0xa0, 0xb9, 0x90, 0x53, 0xe9, 0xde, 0x49, 0x5e, 0x21, 0xb0, 0x5d, 0x29, 0x85, 0xed, 0x73, 0x86,
	0x3a, 0x40, 0x01, 0x96, 0x3d, 0xe5, 0x55, 0xd4, 0xa0, 0x7d, 0xed, 0x3a, 0x72, 0xa2, 0xdc, 0xc5,
	0x0d, 0xaf, 0x21, 0x87, 0xee, 0x01, 0x49, 0xa8, 0x63, 0x0f, 0x3a, 0x33, 0x61, 0xdd, 0x0a, 0x95,
	0x2b, 0x47, 0x88, 0xa0, 0xff, 0x2b, 0x48, 0x6a, 0xd0, 0x11, 0x57, 0xee, 0x6c, 0x3c, 0x77, 0x6c,
	0xde, 0xa4, 0x23, 0x0a, 0xa0, 0xb1, 0x45, 0xac, 0xc4, 0x4c, 0x58, 0x9e, 0xa0, 0xbd, 0x8d, 0x7d,
	0xd0, 0x4a, 0x26, 0x05, 0x48, 0x19, 0x3b, 0xde, 0xfe, 0x96, 0x1d, 0x52, 0x4a, 0x26, 0xa5, 0x8b,
	0x5d, 0x68, 0x29, 0x31, 0x71, 0x3c, 0x5f, 0x28, 0xae, 0xd1, 0xad, 0xf6, 0x44, 0xb3, 0x8e, 0x00,
	0x0d, 0xef, 0xde, 0xf3, 0xc5, 0x9c, 0xf7, 0xe8, 0x9f, 0xf2, 0x4c, 0x13, 0xbf, 0xe4, 0x5f, 0xa9,
	0xc9, 0xbe, 0x53, 0x93, 0xfd, 0xa4, 0x26, 0xfb, 0xf8, 0x35, 0x2b, 0x0f, 0x8d, 0xec, 0xfd, 0x2f,
	0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x53, 0x6a, 0x08, 0xe0, 0xc2, 0x01, 0x00, 0x00,
}

func (m *ActionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Gid != 0 {
		i = encodeVarintCli(dAtA, i, uint64(m.Gid))
		i--
		dAtA[i] = 0x20
	}
	if m.Uid != 0 {
		i = encodeVarintCli(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x18
	}
	if m.Ack != 0 {
		i = encodeVarintCli(dAtA, i, uint64((uint32(m.Ack)<<1)^uint32((m.Ack>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.ActionID != 0 {
		i = encodeVarintCli(dAtA, i, uint64(m.ActionID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCli(dAtA []byte, offset int, v uint64) int {
	offset -= sovCli(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ActionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionID != 0 {
		n += 1 + sovCli(uint64(m.ActionID))
	}
	if m.Ack != 0 {
		n += 1 + sozCli(uint64(m.Ack))
	}
	if m.Uid != 0 {
		n += 1 + sovCli(uint64(m.Uid))
	}
	if m.Gid != 0 {
		n += 1 + sovCli(uint64(m.Gid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCli(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCli(x uint64) (n int) {
	return sovCli(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ActionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCli
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionID", wireType)
			}
			m.ActionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCli
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionID |= ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCli
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Ack = v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCli
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCli
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCli(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCli
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCli
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCli(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCli
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCli
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCli
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCli
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCli
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCli
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCli(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCli
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCli = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCli   = fmt.Errorf("proto: integer overflow")
)
